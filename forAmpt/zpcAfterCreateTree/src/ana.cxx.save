#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>

#include "math.h"
#include "string.h"

#ifndef __CINT__
#include "TROOT.h"
#include "TFile.h"

#include "TChain.h"
#include "TF1.h"
#include "TH1.h"
#include "TH2.h"
#include "TStyle.h"
#include "TCanvas.h"
#include "TProfile.h"
#include "TTree.h"
#include "TNtuple.h"
#include "TRandom.h"
#include "TMath.h"
#include "TVector2.h"
#include "TVector3.h"
#include "TLorentzVector.h"
#include "TSystem.h"
#include "TUnixSystem.h"
#include "TRandom3.h"
#endif

#include <stdio.h>
#include <iostream>
#include <fstream>
#include "iomanip"
using namespace std;

#include "TFile.h"
#include "TTree.h"
#include "TBrowser.h"
#include "TH2.h"
#include "TRandom.h"
#include "TClassTable.h"
#include "TSystem.h"
//#include "MYEvent.h"

double PI = TMath::Pi();
double ANUMBER = 197.;
double pTbin[15]={0.0,0.2,0.4,0.6,0.8,1.0,1.3,1.6,2.0,2.5,3.5,4.0,4.5,5.0,6.};

TH1D *proton_pT_dst = new TH1D("proton_pT_dst","proton_pT_dst",14,pTbin);
TProfile *proton_v2_pT = new TProfile("proton_v2_pT","proton_v2_pT",14,pTbin,-1.,1.);

double EllipticFlow(TVector3 PP);
int Centrality( double impact_parameter);

int main(int argc, char **argv)
{
    char *FileInput=0;
    char *FileOutput=0;

    if(argc!=3 && argc!=1) return 0;

    if(argc==1)
    {
	FileInput = "example.list";
	FileOutput = "example.root";
    }

    if(argc==3)
    {
	FileInput = argv[1];
	FileOutput = argv[2];
    }

    ifstream filein;
    filein.open(FileInput);
    cout<<FileInput<<endl;

    if(!filein) return(0);

    Int_t nevent,nrun,multi,NpartP,NpartT,NELP,NINP,NELT,NINT;
    Float_t impactpar;
    Float_t passhead;
    Float_t px,py,pz,am,x,y,z,time;
	Float_t energy;
    
    char others1[256],others2[256],others3[256],others4[256];
    Int_t id;

    char outfile[256];
    sprintf(outfile,"%s.root",FileOutput); 
    TFile *file = new TFile(outfile,"RECREATE");

    Int_t count=0;
    while(filein.good()){

	if (count%10==0)
	    cout << count << endl;
	filein>>nevent>>nrun>>multi>>impactpar>>NpartP>>NpartT>>NELP>>NINP>>NELT>>NINT>>passhead;
	//if(!filein.good()){ cout <<"Nevent----> " << nevent << " Multi---> "<<multi<< endl; break;}
	if(!filein.good()) break;

	for (Int_t nlines=0;nlines<multi;nlines++) {
	    //filein >> id >> px >> py >> pz >> am >> x >> y >> z >> time;
	    filein >> id >> px >> py >> pz >> am >> others1 >> others2 >> others3 >> others4;
	    //filein >> indx >> id >> px >> py >> pz >> am >> others1 >> others2 >> others3 >> others4;

	    if(!filein.good()) break;

	    if(strstr(others1,"*") || strstr(others2,"*") || strstr(others3,"*") ||strstr(others4,"*"))
	    {
	      x=1000000.;
	      y=1000000.;
	      z=1000000.;
	      time=1000000.;
	    }
	    else
	    {
	      x=atof(others1);
	      y=atof(others2);
	      z=atof(others3);
	      time=atof(others4);
	    }

	    //TVector3 mP(px,py,pz);
	    energy = sqrt(px*px+py*py+pz*pz+am*am);
	    TLorentzVector mP(px,py,pz,energy);
	    double pseorap=10.;
	    if(mP.Pt()>10e-7) pseorap=mP.PseudoRapidity();
	    int centrality = Centrality(impactpar);
	    if(centrality>=0 && centrality<80 && id==2212 && fabs(pseorap)<1.)
	    {
	      int xbin = proton_pT_dst->GetXaxis()->FindBin(mP.Pt());
	      double dpT = proton_pT_dst->GetXaxis()->GetBinWidth(xbin);
	      double dy = 2.;

	      proton_pT_dst->Fill(mP.Pt(),1./(2.*PI*mP.Pt()*dpT*dy));
	      proton_v2_pT->Fill(mP.Pt(),EllipticFlow(mP.Vect()));
	    }
	}
	count++;
    }
    
	filein.close();
    
    proton_pT_dst->Write();
    proton_v2_pT->Write();
    file->Write();
    
    delete proton_pT_dst;
    delete proton_v2_pT;
    delete file;

}
//-----------
int Centrality( double impact_parameter)
{
  int central=1000;
  for(int i=1 ; i<=100 ; i++)
  {
    if(impact_parameter<=sqrt(i/100.)*2.*pow(ANUMBER,1./3.)*1.124)
    {
      central = i-1;
      return central;
    }
  }
  return central;
}

//-------elliptic flow-----
double EllipticFlow(TVector3 PP)
{
  if((PP.Px()==0.)&&(PP.Py()!=0.)) {return -1.;}
  else if((PP.Px()!=0.)&&(PP.Py()==0.)) {return 1.;}
  else if((PP.Px()==0.)&&(PP.Py()==0.)) {return 0.;}
  else {return (PP.Px()*PP.Px()-PP.Py()*PP.Py())/PP.Perp2();}
}

